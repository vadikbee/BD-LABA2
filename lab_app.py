import streamlit as st
import pandas as pd
import numpy as np
import xgboost as xgb
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error
import matplotlib.pyplot as plt
import matplotlib
import base64
import io  # <-- –î–æ–±–∞–≤–ª–µ–Ω –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –∏–º–ø–æ—Ä—Ç

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ —Ç–µ–º–∞ "–ù–æ—á–Ω–∞—è —Å–∞–∫—É—Ä–∞" ---

st.set_page_config(
    page_title="–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ü–µ–Ω –Ω–∞ –∫–≤–∞—Ä—Ç–∏—Ä—ã",
    page_icon="üå∏",
    layout="wide",
    initial_sidebar_state="expanded"
)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ base64
def get_base64(bin_file):
    with open(bin_file, 'rb') as f:
        data = f.read()
    return base64.b64encode(data).decode()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–æ–Ω–∞
def set_background(jpg_file):
    bin_str = get_base64(jpg_file)
    page_bg_img = '''
    <style>
    .stApp {
    background-image: url("data:image/jpg;base64,%s");
    background-size: cover;
    }
    </style>
    ''' % bin_str
    st.markdown(page_bg_img, unsafe_allow_html=True)


# –ü–æ–ø—Ä–æ–±—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–æ–Ω, –µ—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
try:
    set_background('sakura.jpg')
except FileNotFoundError:
    st.warning("–§–∞–π–ª 'sakura.jpg' –Ω–µ –Ω–∞–π–¥–µ–Ω. –§–æ–Ω –Ω–µ –±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

# –ö–∞—Å—Ç–æ–º–Ω—ã–π CSS –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ç–µ–º—ã
st.markdown("""
<style>
    /* –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç */
    .stApp {
        color: #FFFFFF;
    }
    /* –ó–∞–≥–æ–ª–æ–≤–∫–∏ */
    h1, h2, h3 {
        color: #FFC0CB; /* –†–æ–∑–æ–≤—ã–π —Ü–≤–µ—Ç —Å–∞–∫—É—Ä—ã */
    }
    /* –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å */
    .css-1d391kg {
        background-color: rgba(0, 0, 0, 0.6);
        border-right: 2px solid #FFC0CB;
    }
    /* –í–∏–¥–∂–µ—Ç—ã –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ */
    .stSelectbox, .stNumberInput, .stButton {
        color: #FFFFFF;
    }
    /* –ö–Ω–æ–ø–∫–∏ */
    .stButton>button {
        background-color: #FF69B4;
        color: #FFFFFF;
        border-radius: 8px;
        border: 1px solid #FFC0CB;
    }
    .stButton>button:hover {
        background-color: #FFC0CB;
        color: #000000;
        border: 1px solid #FF69B4;
    }
    /* –ú–µ—Ç—Ä–∏–∫–∏ */
    .stMetric {
        background-color: rgba(40, 40, 40, 0.7);
        border-radius: 10px;
        padding: 10px;
        border: 1px solid #FF69B4;
    }
    /* –†–∞–º–∫–∞ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ */
    .stPlotlyChart {
        border: 1px solid #FFC0CB;
        border-radius: 10px;
    }
</style>
""", unsafe_allow_html=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ Matplotlib
matplotlib.rc('axes', facecolor='black', edgecolor='pink', labelcolor='white', titlecolor='pink')
matplotlib.rc('xtick', color='white')
matplotlib.rc('ytick', color='white')
matplotlib.rc('figure', facecolor='black', edgecolor='pink')
matplotlib.rc('legend', facecolor='black', edgecolor='pink', labelcolor='white')


# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö (—Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º) ---

@st.cache_data
def load_data(file_path):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ CSV —Ñ–∞–π–ª–∞."""
    try:
        df = pd.read_csv(file_path)
        return df
    except FileNotFoundError:
        st.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
        return None


@st.cache_data
def preprocess_data(df, is_train=True):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö: –æ—á–∏—Å—Ç–∫–∞, –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ."""
    df_processed = df.copy()

    # –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–Ω—É–∂–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    if 'id' in df_processed.columns:
        df_processed = df_processed.drop('id', axis=1)

    # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤ (–ø—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è)
    for col in ['Living area', 'Kitchen area', 'Floor']:
        if col in df_processed.columns:
            df_processed[col] = df_processed[col].fillna(df_processed[col].median())
    df_processed = df_processed.dropna()

    # –§–∞–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∫–æ–ª–æ–Ω–æ–∫ —Å –≤—ã—Å–æ–∫–æ–π –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é
    for col in ['Metro station', 'Region']:
        if col in df_processed.columns:
            df_processed[col] = pd.factorize(df_processed[col])[0]

    # One-Hot Encoding –¥–ª—è –∫–æ–ª–æ–Ω–æ–∫ —Å –Ω–∏–∑–∫–æ–π –∫–∞—Ä–¥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é
    df_processed = pd.get_dummies(df_processed, columns=['Apartment type', 'Renovation'], dummy_na=False)

    # –î–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏ –∏–∑ —Ç—Ä–µ–π–Ω–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
    if not is_train:
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ train_columns —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ session_state
        if 'train_columns' in st.session_state:
            train_cols = st.session_state.get('train_columns', [])
            # –£–±–µ—Ä–µ–º —Ü–µ–ª–µ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é, –µ—Å–ª–∏ –æ–Ω–∞ —Å–ª—É—á–∞–π–Ω–æ –ø–æ–ø–∞–ª–∞ –≤ —Å–ø–∏—Å–æ–∫ –∫–æ–ª–æ–Ω–æ–∫
            if 'Price' in train_cols:
                train_cols.remove('Price')

            current_cols = df_processed.columns.tolist()
            missing_cols = set(train_cols) - set(current_cols)
            for c in missing_cols:
                df_processed[c] = 0

            extra_cols = set(current_cols) - set(train_cols)
            df_processed = df_processed.drop(columns=list(extra_cols))

            df_processed = df_processed[train_cols]
        else:
            st.error(
                "–ö–æ–ª–æ–Ω–∫–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –Ω–µ –±—ã–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –æ–±—É—á–µ–Ω–∏–µ'.")
            return None

    return df_processed


@st.cache_resource
def train_models(X_train, y_train):
    """–û–±—É—á–∞–µ—Ç –º–æ–¥–µ–ª–∏ —Ä–µ–≥—Ä–µ—Å—Å–∏–∏."""
    models = {}

    with st.spinner('–û–±—É—á–µ–Ω–∏–µ Random Forest...'):
        rf = RandomForestRegressor(n_estimators=100, random_state=42, n_jobs=-1)
        rf.fit(X_train, y_train)
        models['Random Forest'] = rf

    with st.spinner('–û–±—É—á–µ–Ω–∏–µ XGBoost...'):
        xgb_reg = xgb.XGBRegressor(objective='reg:squarederror', n_estimators=100, random_state=42)
        xgb_reg.fit(X_train, y_train)
        models['XGBoost'] = xgb_reg

    return models


# --- –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---

st.title('üå∏ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–≤–∞—Ä—Ç–∏—Ä –≤ –ú–æ—Å–∫–≤–µ')
st.write('–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –º–µ—Ç–æ–¥–∏—á–∫–∏.')

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
df_train_raw = load_data('MSK_Price_train.csv')
df_valid_raw = load_data('MSK_Price_valid.csv')

if df_train_raw is not None and df_valid_raw is not None:

    st.sidebar.header("–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    app_mode = st.sidebar.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        ["–û–±–∑–æ—Ä –¥–∞–Ω–Ω—ã—Ö", "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –æ–±—É—á–µ–Ω–∏–µ", "–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã"]
    )

    # --- –†–ê–ó–î–ï–õ 1: –û–±–∑–æ—Ä –¥–∞–Ω–Ω—ã—Ö ---
    if app_mode == "–û–±–∑–æ—Ä –¥–∞–Ω–Ω—ã—Ö":
        st.header("1. –ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è")
        st.write("–ü–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:")
        st.dataframe(df_train_raw.head(10))
        st.write(f"–†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö: {df_train_raw.shape[0]} —Å—Ç—Ä–æ–∫, {df_train_raw.shape[1]} —Å—Ç–æ–ª–±—Ü–æ–≤.")

        st.subheader("–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —á–∏—Å–ª–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:")
        st.write(df_train_raw.describe())

        st.subheader("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏–ø–∞—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–æ–ø—É—Å–∫–∞—Ö:")

        # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –û–®–ò–ë–ö–ò ---
        # –í–º–µ—Å—Ç–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—á–Ω–æ–≥–æ —Ñ–∞–π–ª–∞, –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –≤—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ DataFrame
        buffer = io.StringIO()
        df_train_raw.info(buf=buffer)
        s = buffer.getvalue()
        st.text(s)


    # --- –†–ê–ó–î–ï–õ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –æ–±—É—á–µ–Ω–∏–µ ---
    elif app_mode == "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –æ–±—É—á–µ–Ω–∏–µ":
        st.header("2. –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π")

        st.subheader("2.1. –û—á–∏—Å—Ç–∫–∞ –æ—Ç –≤—ã–±—Ä–æ—Å–æ–≤")
        st.write("–ö–∞–∫ –∏ –≤ –º–µ—Ç–æ–¥–∏—á–∫–µ, –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω –∏ —É–¥–∞–ª–∏–º –≤—ã–±—Ä–æ—Å—ã.")

        fig, ax = plt.subplots()
        df_train_raw['Price'].hist(bins=100, ax=ax)
        ax.set_title("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω –¥–æ –æ—á–∏—Å—Ç–∫–∏")
        ax.set_xlabel("–¶–µ–Ω–∞")
        ax.set_ylabel("–ß–∞—Å—Ç–æ—Ç–∞")
        st.pyplot(fig)

        price_range = st.slider(
            '–í—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ (–≤ –º–ª–Ω. —Ä—É–±.)',
            0.0, 100.0, (2.0, 50.0)
        )
        min_price, max_price = price_range[0] * 1_000_000, price_range[1] * 1_000_000

        df_train_filtered = df_train_raw[(df_train_raw['Price'] > min_price) & (df_train_raw['Price'] < max_price)]
        st.write(f"–ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –æ—Å—Ç–∞–ª–æ—Å—å {df_train_filtered.shape[0]} —Å—Ç—Ä–æ–∫ (–∏–∑ {df_train_raw.shape[0]}).")

        fig, ax = plt.subplots()
        df_train_filtered['Price'].hist(bins=100, ax=ax)
        ax.set_title("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏")
        ax.set_xlabel("–¶–µ–Ω–∞")
        ax.set_ylabel("–ß–∞—Å—Ç–æ—Ç–∞")
        st.pyplot(fig)

        st.subheader("2.2. –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ")
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –¥–ª—è –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏, —á—Ç–æ–±—ã –Ω–µ –∏–∑–º–µ–Ω—è—Ç—å df_train_filtered
        df_train_to_process = df_train_filtered.drop('Price', axis=1)
        df_processed = preprocess_data(df_train_to_process, is_train=True)

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ —Å —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        df_processed['Price'] = df_train_filtered['Price']

        st.write("–î–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—Å–∫–æ–≤, —Ñ–∞–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏ One-Hot –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ):")
        st.dataframe(df_processed.head())

        # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        X = df_processed.drop('Price', axis=1)
        y = df_processed['Price']

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞
        st.session_state['train_columns'] = X.columns.tolist()

        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

        st.subheader("2.3. –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π –∏ –æ—Ü–µ–Ω–∫–∞")
        models = train_models(X_train, y_train)
        st.session_state['models'] = models  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª–∏ –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
        st.session_state['data_filtered'] = True  # –§–ª–∞–≥, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –±—ã–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã

        st.write("–û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–µ–π –Ω–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–µ (Mean Absolute Error):")

        col1, col2 = st.columns(2)

        for name, model in models.items():
            y_pred = model.predict(X_test)
            mae = mean_absolute_error(y_test, y_pred)
            if name == 'Random Forest':
                col1.metric(label=name, value=f"{mae:,.0f} —Ä—É–±.")
            else:
                col2.metric(label=name, value=f"{mae:,.0f} —Ä—É–±.")

        best_model_name = "Random Forest"
        best_model = models[best_model_name]

        st.subheader(f"2.4. –ê–Ω–∞–ª–∏–∑ –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏: {best_model_name}")
        fig, ax = plt.subplots(figsize=(8, 6))
        ax.scatter(y_test, best_model.predict(X_test), alpha=0.3)
        ax.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], '--r', linewidth=2)
        ax.set_xlabel('–ù–∞—Å—Ç–æ—è—â–∞—è —Ü–µ–Ω–∞')
        ax.set_ylabel('–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞')
        ax.set_title('–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –∏ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ü–µ–Ω')
        st.pyplot(fig)

        st.subheader("2.5. –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        df_valid_filtered = df_valid_raw[(df_valid_raw['Price'] > min_price) & (df_valid_raw['Price'] < max_price)]

        y_valid = df_valid_filtered['Price']
        X_valid_raw = df_valid_filtered.drop('Price', axis=1)
        X_valid = preprocess_data(X_valid_raw, is_train=False)

        if X_valid is not None:
            valid_pred = best_model.predict(X_valid)
            valid_mae = mean_absolute_error(y_valid, valid_pred)
            st.metric(label=f"MAE –Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω–æ–º –Ω–∞–±–æ—Ä–µ ({best_model_name})", value=f"{valid_mae:,.0f} —Ä—É–±.")
            st.info("–≠—Ç–æ —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –º–æ–¥–µ–ª–∏ –Ω–∞ –¥–∞–Ω–Ω—ã—Ö, –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω–∞ –Ω–µ –≤–∏–¥–µ–ª–∞ –≤–æ –≤—Ä–µ–º—è –æ–±—É—á–µ–Ω–∏—è.")


    # --- –†–ê–ó–î–ï–õ 3: –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ ---
    elif app_mode == "–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã":
        st.header("3. –°–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –±—ã–ª–∏ –ª–∏ –º–æ–¥–µ–ª–∏ –æ–±—É—á–µ–Ω—ã
        if 'models' not in st.session_state or not st.session_state.get('data_filtered'):
            st.warning(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª '–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –æ–±—É—á–µ–Ω–∏–µ', —á—Ç–æ–±—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏ –æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª–∏.")
        else:
            st.write("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–≤–∞—Ä—Ç–∏—Ä—ã, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –æ—Ç –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏ (Random Forest).")

            final_model = st.session_state['models']["Random Forest"]

            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            st.sidebar.subheader("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–≤–∞—Ä—Ç–∏—Ä—ã:")

            apartment_types = df_train_raw['Apartment type'].unique()
            renovations = df_train_raw['Renovation'].unique()
            regions = df_train_raw['Region'].unique()
            metro_stations = df_train_raw['Metro station'].unique()

            # –í–∏–¥–∂–µ—Ç—ã –¥–ª—è –≤–≤–æ–¥–∞
            num_rooms = st.sidebar.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç", 1, 6, 2)
            area = st.sidebar.slider("–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å, –º¬≤", 20.0, 200.0, 55.0)
            living_area = st.sidebar.slider("–ñ–∏–ª–∞—è –ø–ª–æ—â–∞–¥—å, –º¬≤", 10.0, 150.0, 35.0)
            kitchen_area = st.sidebar.slider("–ü–ª–æ—â–∞–¥—å –∫—É—Ö–Ω–∏, –º¬≤", 5.0, 50.0, 10.0)
            floor = st.sidebar.slider("–≠—Ç–∞–∂", 1, 50, 5)
            num_floors = st.sidebar.slider("–í—Å–µ–≥–æ —ç—Ç–∞–∂–µ–π –≤ –¥–æ–º–µ", 1, 50, 12)
            minutes_to_metro = st.sidebar.slider("–ú–∏–Ω—É—Ç –¥–æ –º–µ—Ç—Ä–æ", 1, 60, 15)

            apartment_type = st.sidebar.selectbox("–¢–∏–ø –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–æ–≤", apartment_types)
            renovation = st.sidebar.selectbox("–†–µ–º–æ–Ω—Ç", renovations)
            region = st.sidebar.selectbox("–†–∞–π–æ–Ω", regions)
            metro_station = st.sidebar.selectbox("–°—Ç–∞–Ω—Ü–∏—è –º–µ—Ç—Ä–æ", metro_stations)

            if st.sidebar.button("–ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å"):
                # --- –£–õ–£–ß–®–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ pd.concat –≤–º–µ—Å—Ç–æ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ .append() ---
                input_data = {
                    'Minutes to metro': [minutes_to_metro], 'Number of rooms': [num_rooms],
                    'Area': [area], 'Living area': [living_area], 'Kitchen area': [kitchen_area],
                    'Floor': [floor], 'Number of floors': [num_floors],
                    'Metro station': [metro_station], 'Region': [region],
                    'Apartment type': [apartment_type], 'Renovation': [renovation]
                }
                input_df = pd.DataFrame(input_data)

                # –ö–æ–ø–∏—è –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–∞–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏, —á—Ç–æ–±—ã –Ω–µ –∏–∑–º–µ–Ω—è—Ç—å df_train_raw
                temp_factorize_metro = pd.concat([df_train_raw['Metro station'], input_df['Metro station']],
                                                 ignore_index=True)
                temp_factorize_region = pd.concat([df_train_raw['Region'], input_df['Region']], ignore_index=True)

                input_df['Metro station'] = pd.factorize(temp_factorize_metro)[0][-1]
                input_df['Region'] = pd.factorize(temp_factorize_region)[0][-1]

                # One-Hot Encoding
                input_df = pd.get_dummies(input_df, columns=['Apartment type', 'Renovation'])

                # –û–±–µ—Å–ø–µ—á–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞ –∏ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –∫–æ–ª–æ–Ω–æ–∫
                if 'train_columns' in st.session_state:
                    train_cols = st.session_state['train_columns']

                    # –£–¥–∞–ª—è–µ–º Price, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                    if 'Price' in train_cols:
                        train_cols.remove('Price')

                    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏
                    for col in set(train_cols) - set(input_df.columns):
                        input_df[col] = 0

                    # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫
                    input_df = input_df[train_cols]

                    prediction = final_model.predict(input_df)[0]
                    st.success(f"## –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: **{prediction:,.0f} —Ä—É–±.**")
                else:
                    st.error("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥.")